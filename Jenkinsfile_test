pipeline {
  agent { docker { image 'losete/spring-boot-angular-starter:latest' } }
  options {
    copyArtifactPermission('**')
  }
  stages {
    stage('Setup pipeline'){
      steps{
        step([ $class: 'CopyArtifact',
        filter: 'artifacts.tar.gz',
        projectName: 'test-newImage',
        fingerprintArtifacts: true,
        selector: lastWithArtifacts()
        ])
        sh 'tar -xvzf artifacts.tar.gz'
        sh 'mkdir artifacts/reports'
      }
    }
    stage('Parallel Verify and Benchmarks'){
        parallel {
            stage('Benchmarks'){
                steps{
                    dir("artifacts") {
                        sh 'curl -o benchmark.sh -s https://gist.githubusercontent.com/Chusca/9a75b4c3926768588fcfbb60f5753463/raw/benchmark.sh'
                        sh 'bash benchmark.sh'
                    }
                }
            }
            stage('Verify'){
                steps{
                    dir("artifacts") {
                        sh 'mvn verify > reports/verify.txt'
                    }
                    sh 'tar --exclude=artifacts/reports -cvzf artifacts.tar.gz artifacts'
                    archiveArtifacts 'artifacts.tar.gz'
                    build (job: "pipeline_deploy", wait: true, propagate: true)
                }
            }
        }
    }
  }
  post {
    always {
        sh 'tar -cvzf reports.tar.gz artifacts/reports'
        emailext (attachmentsPattern: 'reports.tar.gz',
          body: 'Workflow result on ${currentBuild.currentResult}, check attached artifacts for further information',
          subject: "Jenkins Build ${currentBuild.currentResult} on Job ${env.JOB_NAME}",
          from: 'notificaciones.torusnewies@gmail.com',
          replyTo: '',
          to: 'losetazo@gmail.com'
        )
    }
    failure {
        archiveArtifacts 'reports.tar.gz'
    }
    cleanup{
        cleanWs()
    }
      
  }
}
